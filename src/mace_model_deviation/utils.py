"""
Utility functions for MACE model deviation calculation
"""

import os
import torch
import ase.io
from ase import Atoms
from typing import List, Union
import logging

logger = logging.getLogger(__name__)


def load_mace_models(model_files: List[str], device: str = 'cuda') -> List[torch.nn.Module]:
    """
    Load MACE models from file paths
    
    Args:
        model_files: List of paths to MACE model files
        device: Device to load models on
        
    Returns:
        List of loaded MACE models
        
    Raises:
        FileNotFoundError: If any model file is not found
        RuntimeError: If model loading fails
    """
    
    models = []
    
    for model_file in model_files:
        if not os.path.exists(model_file):
            raise FileNotFoundError(f"MACE model file not found: {model_file}")
        
        try:
            logger.info(f"Loading MACE model: {model_file}")
            
            # Load model using torch.jit.load (for TorchScript models)
            # or torch.load (for regular PyTorch models)
            try:
                model = torch.jit.load(model_file, map_location=device)
            except RuntimeError:
                # Fallback to regular torch.load
                model = torch.load(model_file, map_location=device)
            
            model.eval()  # Set to evaluation mode
            models.append(model)
            
        except Exception as e:
            raise RuntimeError(f"Failed to load MACE model {model_file}: {e}")
    
    logger.info(f"Successfully loaded {len(models)} MACE models")
    return models


def read_trajectory(trajectory_file: str) -> List[Atoms]:
    """
    Read trajectory file using ASE
    
    Args:
        trajectory_file: Path to trajectory file
        
    Returns:
        List of ASE Atoms objects
        
    Raises:
        FileNotFoundError: If trajectory file is not found
        RuntimeError: If trajectory reading fails
    """
    
    if not os.path.exists(trajectory_file):
        raise FileNotFoundError(f"Trajectory file not found: {trajectory_file}")
    
    try:
        logger.info(f"Reading trajectory: {trajectory_file}")
        
        # Try different formats
        try:
            # Try LAMMPS dump format first
            frames = ase.io.read(trajectory_file, index=':', format='lammps-dump-text')
        except Exception:
            try:
                # Try generic ASE reader
                frames = ase.io.read(trajectory_file, index=':')
            except Exception:
                # Try XYZ format
                frames = ase.io.read(trajectory_file, index=':', format='xyz')
        
        # Ensure frames is a list
        if isinstance(frames, Atoms):
            frames = [frames]
        
        logger.info(f"Successfully read {len(frames)} frames")
        return frames
        
    except Exception as e:
        raise RuntimeError(f"Failed to read trajectory {trajectory_file}: {e}")


def write_model_deviation(deviations: List[float], output_file: str) -> None:
    """
    Write model deviation results to file
    
    Args:
        deviations: List of model deviation values (one per frame)
        output_file: Path to output file
        
    Raises:
        RuntimeError: If writing fails
    """
    
    try:
        # Create output directory if needed
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        
        logger.info(f"Writing model deviations to: {output_file}")
        
        with open(output_file, 'w') as f:
            # Write header
            f.write("# Frame  Max_Force_Devi\n")
            f.write("# Generated by mace-model-deviation package\n")
            
            # Write data
            for i, devi in enumerate(deviations):
                f.write(f"{i:6d}  {devi:12.6f}\n")
        
        logger.info(f"Model deviation results written successfully")
        
    except Exception as e:
        raise RuntimeError(f"Failed to write model deviation file {output_file}: {e}")


def setup_logging(level: str = 'INFO') -> None:
    """
    Setup logging for mace-model-deviation package
    
    Args:
        level: Logging level ('DEBUG', 'INFO', 'WARNING', 'ERROR')
    """
    
    logging.basicConfig(
        level=getattr(logging, level.upper()),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )